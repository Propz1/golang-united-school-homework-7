package coverage

import (
	"errors"
	"os"
	"reflect"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
)

var (
	expectedResult        bool
	length                = 2
	errMatrixCreate       = "matrix was not created: "
	errMatrixNotEquel     = "The two matrix not equal: expected %v, got %v"
	errRowsNotEquelLength = errors.New("Rows need to be the same length")
	errSet                = errors.New("disturbed conditions of Set(row, col, value int) method: (row < 0 || m.rows <= row || col < 0 || m.cols <= col)")
)

// func RowsNotEquelLength(err error) bool {
// 	return err.Error() == errRowsNotEquelLength
// }

// DO NOT EDIT THIS FUNCTION
func init() {
	content, err := os.ReadFile("students_test.go")
	if err != nil {
		panic(err)
	}
	err = os.WriteFile("autocode/students_test", content, 0644)
	if err != nil {
		panic(err)
	}
}

// WRITE YOUR CODE BELOW

func Test_People(t *testing.T) {

	tData := make(map[string]People)

	tData["birthDay"] = []Person{
		{firstName: "Ivan", lastName: "Bunin", birthDay: time.Date(1870, time.October, 10, 0, 0, 0, 0, time.Local)},
		{firstName: "Alexander", lastName: "Pushkin", birthDay: time.Date(1799, time.May, 26, 0, 0, 0, 0, time.Local)},
	}

	tData["firstName"] = []Person{
		{firstName: "Alexander", lastName: "Alexandrov", birthDay: time.Date(1983, time.January, 26, 0, 0, 0, 0, time.Local)},
		{firstName: "Ivan", lastName: "Ivanov", birthDay: time.Date(1983, time.January, 26, 0, 0, 0, 0, time.Local)},
	}

	tData["lastName"] = []Person{
		{firstName: "Ivan", lastName: "Alexandrov", birthDay: time.Date(1983, time.January, 26, 0, 0, 0, 0, time.Local)},
		{firstName: "Ivan", lastName: "Ivanov", birthDay: time.Date(1983, time.January, 26, 0, 0, 0, 0, time.Local)},
	}

	tData["lastName_Equal"] = []Person{
		{firstName: "Ivan", lastName: "Ivanov", birthDay: time.Date(1983, time.January, 26, 0, 0, 0, 0, time.Local)},
		{firstName: "Ivan", lastName: "Ivanov", birthDay: time.Date(1983, time.January, 26, 0, 0, 0, 0, time.Local)},
	}

	for name, tcase := range tData {

		if name == "lastName_Equal" {
			expectedResult = false
		} else {
			expectedResult = true
		}

		v := tcase

		t.Run(name, func(t *testing.T) {

			result := v.Less(0, 1)

			if result != expectedResult {
				t.Errorf("[Test_People: %s] expected: %v, got %v", name, expectedResult, result)
			}

			v.Swap(0, 1)

			result = v.Less(0, 1)

			expectedResult = false

			if result != expectedResult {
				t.Errorf("[Test_People: %s] expected: %v, got %v", name, expectedResult, result)
			}

			len := v.Len()

			if len != length {
				t.Errorf("[Test_People: %s \"length\"] expected: %v, got %v", name, length, len)
			}

		})

	}

}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

func Test_Matrix(t *testing.T) {

	assert := assert.New(t)

	t.Run("New", func(t *testing.T) {

		_, err := New("    1 2 3\n         1 2 3\n  1 2 3    ")

		if err != nil {
			if reflect.DeepEqual(err, errRowsNotEquelLength) {
				t.Errorf("error \"Rows has a different lenght\": %s", err.Error())
			} else {
				t.Errorf(errMatrixCreate+" %s", err.Error())
			}
		}

	})

	t.Run("Rows", func(t *testing.T) {

		matrix := &Matrix{rows: 3, cols: 3, data: []int{1, 2, 3, 1, 2, 3, 1, 2, 3}}
		rows := matrix.Rows()

		expectedRows := [][]int{{1, 2, 3}, {1, 2, 3}, {1, 2, 3}}

		if !assert.Equal(rows, expectedRows, "The two arrays (rows of matrix) should be the same.") {
			t.Errorf("The tow array (rows of matrix) are not equel: expected %v, got %v", expectedRows, rows)
		}

	})

	t.Run("Cols", func(t *testing.T) {

		matrix := &Matrix{rows: 3, cols: 3, data: []int{1, 2, 3, 1, 2, 3, 1, 2, 3}}
		cols := matrix.Cols()

		expectedCols := [][]int{{1, 1, 1}, {2, 2, 2}, {3, 3, 3}}

		if !assert.Equal(cols, expectedCols, "The two array (cols of matrix) should be the same.") {
			t.Errorf("The tow array (cols of matrix) are not equel: expected %v, got %v", expectedCols, cols)
		}

	})

	t.Run("Set", func(t *testing.T) {

		matrix := &Matrix{rows: 3, cols: 3, data: []int{1, 2, 3, 1, 2, 3, 1, 2, 3}}
		result := matrix.Set(1, 1, 10)

		expectedResult := true

		if result != expectedResult {
			t.Errorf("%s", errSet.Error())
		}

	})

}

func BenchmarkTets_Matrix(b *testing.B) {

	assert := assert.New(b)

	b.Run("BenchmarkTets_New()", func(*testing.B) {

		_, err := New("    1 2 3\n         1 2 3\n  1 2 3\n  8 250 8555555\n   0 0 0\n   125 896 8745658    ")

		if err != nil {
			b.Errorf(errMatrixCreate+" %s", err.Error())
		}

	})

	b.Run("BenchmarkTets_Rows()", func(*testing.B) {

		matrix := &Matrix{rows: 3, cols: 3, data: []int{1, 2, 3, 1, 2, 3, 1, 2, 3}}
		rows := matrix.Rows()

		expectedRows := [][]int{{1, 2, 3}, {1, 2, 3}, {1, 2, 3}}

		if !assert.Equal(rows, expectedRows, "The two arrays (rows of matrix) should be the same.") {
			b.Errorf("The tow array (rows of matrix) are not equel: expected %v, got %v", expectedRows, rows)
		}

	})

	b.Run("BenchmarkTets_Cols()", func(*testing.B) {

		matrix := &Matrix{rows: 3, cols: 3, data: []int{1, 2, 3, 1, 2, 3, 1, 2, 3}}
		cols := matrix.Cols()

		expectedCols := [][]int{{1, 1, 1}, {2, 2, 2}, {3, 3, 3}}

		if !assert.Equal(cols, expectedCols, "The two array (cols of matrix) should be the same.") {
			b.Errorf("The tow array (cols of matrix) are not equel: expected %v, got %v", expectedCols, cols)
		}

	})

	b.Run("BenchmarkTets_Set()", func(*testing.B) {

		matrix := &Matrix{rows: 3, cols: 3, data: []int{1, 2, 3, 1, 2, 3, 1, 2, 3}}
		result := matrix.Set(1, 1, 10)

		if !result {
			b.Errorf("%s", errSet.Error())
		}

	})

}
